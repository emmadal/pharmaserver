union RegisterUser = User | Doctor | DeliveryBoy
union SearchResult = Doctor | DeliveryBoy

type Query {
  users: [User!]!
  pharmacies: [Pharmacy!]!
  orders: [Order]
  employees: [DeliveryBoy!]!
  doctors: [Doctor!]!
  search(name: String!, pharmacyID: ID!): [SearchResult!]
}

type User {
  id: ID!
  name: String!
  tel: String!
  email: String!
  password: String!
  address: [Address]
  isActive: Boolean!
  token: String
  orders: [Order]
}

type DeliveryBoy {
  id: ID!
  name: String!
  tel: String!
  email: String!
  password: String!
  isActive: Boolean!
  token: String
  employer: Pharmacy
  order_attributed: [Order]
}

type Pharmacy {
  id: ID!
  name: String!
  tel: String!
  email: String
  address: Address!
  password: String!
  doctor: [Doctor]
  employees: [DeliveryBoy]
  orders_received: [Order]
}

type Doctor {
  id: ID!
  name: String!
  password: String!
  tel: String!
  email: String!
  isActive: Boolean!
  token: String
  pharmacy: Pharmacy!
}

type Address {
  id: ID!
  country: String!
  city: String!
  state: String!
  town: String!
  coordinate_gps: [Float]!
  default: Boolean
}

type Order {
  id: ID!
  created_At: String
  ordinance: [String]
  others_ordinance: [String]
  status: ORDER_STATUS!
  pharmacy_sender: Pharmacy
  delivery_boy: DeliveryBoy
  receiver: User!
}

enum ORDER_STATUS {
  ACCEPTED
  CANCELLED
  PENDING
  DELIVERED
  UNDELIVERED
}

input UserInput {
  name: String!
  tel: String!
  email: String!
  password: String!
  isActive: Boolean!
}

type Mutation {
  register(input: UserInput!): RegisterUser!
}
